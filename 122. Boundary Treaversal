#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
void traverseLeft(TreeNode<int>* root, vector<int> &ans){
            // base case
            if((root == NULL) || (root -> left == NULL && root -> right == NULL)){
                return;
            }
            
            ans.push_back(root->data);
            if(root->left){
                traverseLeft(root->left,ans);
            }else{
                traverseLeft(root->right,ans);
            }
        }
    void traverseLeafNode(TreeNode<int>* root, vector<int> &ans){
        if(root == NULL){
            return;
        }
        
        if(root->left == NULL && root -> right == NULL){
            ans.push_back(root->data);
            return;
        }
        
        traverseLeafNode(root->left,ans);
        traverseLeafNode(root->right,ans);
    }
    void traverseRight(TreeNode<int>* root, vector<int> &ans){
        // base case
        if((root == NULL) || (root -> left == NULL && root -> right == NULL)){
            return;
        }
        
        if(root->right){
            traverseRight(root->right,ans);
        }else{
            traverseRight(root->left,ans);
        }
        // back tracking (printing after returning)
        ans.push_back(root->data);
    }
vector<int> traverseBoundary(TreeNode<int>* root){
    vector<int> ans;
        if(root == NULL){
            return ans;
        }
        ans.push_back(root->data);
        traverseLeft(root->left,ans); // traversing left store
        // leafnode in left subtree
        traverseLeafNode(root->left,ans);
        // leafNode in right subtree
        traverseLeafNode(root->right,ans);
        // traverse right
        traverseRight(root->right,ans);
        
        return ans;
}
