#include<unordered_map>
#include<list>
#include<queue>
bool isCycleBFS(int node, unordered_map<int,bool> &visited, unordered_map<int, list<int>> &adj){
    unordered_map<int,int> parent;
    visited[node] = 1;
    parent[node] = -1;
    queue<int> q;
    q.push(node);

    while(!q.empty()){
        int front = q.front();
        q.pop();

        for(auto i : adj[front]){
            if(visited[i] && i != parent[front]){
                return true;
            }else if(!visited[i]){
                q.push(i);
                parent[i] = front;
                visited[i] = 1;
            }
        }
    }
    return false;
}

string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    // creating adjacency list
    unordered_map<int, list<int>> adj;
    for(int i=0; i<edges.size(); i++){
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    // creating visited array 
    unordered_map<int,bool> visited;
    for(int i=0; i<n; i++){
        if(!visited[i]){
            bool ans = isCycleBFS(i,visited,adj);
            if(ans) return "Yes";
        }
    }
    return "No";
}
