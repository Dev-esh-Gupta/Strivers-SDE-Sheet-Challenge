#include<bits/stdc++.h>

bool cycleDFS(int node,  unordered_map<int,bool> &visited,  
unordered_map<int,bool> &dfsVisited, unordered_map<int,list<int>> &adj){
  visited[node] = true;
  dfsVisited[node] = true;

  for(auto neighbour : adj[node]){
    if(!visited[neighbour]){
      bool ans = cycleDFS(neighbour, visited, dfsVisited, adj);
      if(ans)  return true;
    }else if( dfsVisited[neighbour]){
      return true;
    }
  }
  dfsVisited[node] = false;
  return false;
}

int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  unordered_map<int,list<int>> adj;
  // creating adjacency list
  for(int i=0; i<edges.size(); i++){
    int u = edges[i].first;
    int v = edges[i].second;

    adj[u].push_back(v);
  }

  // calling all component using dfs
  unordered_map<int,bool> visited;
  unordered_map<int,bool> dfsVisited;
  for(int i = 1; i<=n ; i++){
    if(!visited[i]){
      bool detectedCycle = cycleDFS(i,visited,dfsVisited,adj);
      if(detectedCycle) return 1;
    }
  }
  return 0;
}
