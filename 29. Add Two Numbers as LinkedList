/**
 * Definition of linked list:
 *
 * class Node {
 * public:
 *      int data;
 *      Node *next;
 *      Node() {
 *          this->data = 0;
 *          this->next = NULL;
 *      }
 *      Node(int data) {
 *          this->data = data;
 *          this->next = NULL;
 *      }
 *      Node (int data, Node *next) {
 *          this->data = data;
 *          this->next = next;
 *      }
 * };
 *
 *************************************************************************/
Node* reverse(Node* num1){
    Node* nex = NULL;
    Node* curr = num1;
    Node* prev = NULL;
    while(curr != NULL){
        nex = curr -> next;
        curr -> next = prev;
        prev = curr;
        curr = nex;
    }
    return prev;
}

Node *addTwoNumbers(Node *num1, Node *num2)
{
    // if(num1 -> next != NULL)
    //     num1 = reverse(num1);
    // if(num2 -> next != NULL)
    //     num2 = reverse(num2);
    
    Node* result = new Node(0);
    Node* ans = result;
    int carry = 0;
    int val = 0;
    while(num1 != NULL && num2 != NULL){
        val = num1 -> data + num2 -> data + carry;
        // cout<<val<<" ";
        if(val > 9){
            carry = 1;
        }else{
            carry = 0;
        }
        result->next =new Node(val%10);
        result = result->next;
        num1 = num1 -> next;
        num2 = num2 -> next;
    }
    while(num1 != NULL){
        val = num1->data + carry;
        if(val > 9){
            carry = 1;
        }else{
            carry = 0;
        }
        result->next = new Node(val%10);
        result = result -> next;
        num1 = num1->next;
    }
    while(num2 != NULL){
        val = num2->data + carry;
        if(val > 9){
            carry = 1;
        }else{
            carry = 0;
        }
        result->next = new Node(val%10);
        result = result -> next;
        num2 = num2->next;
    }
    if(carry == 1){
        result->next = new Node(1);
        result = result -> next;
    }
    // ans = reverse(result);
    return ans->next;
}
