#include <bits/stdc++.h> 
/****************************************************************

    Following is the class structure of the LinkedListNode class:

    template <typename T>
    class LinkedListNode
    {
    public:
        T data;
        LinkedListNode<T> *next;
        LinkedListNode(T data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

*****************************************************************/
LinkedListNode<int>* findMiddle(LinkedListNode<int>* head){
        LinkedListNode<int>* fast = head;
        LinkedListNode<int>* slow = head;
        while(fast->next != NULL && fast->next->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
    
LinkedListNode<int>* reverse(LinkedListNode<int>* head){
        LinkedListNode<int>* prev = NULL;
        LinkedListNode<int>* curr = head;
        LinkedListNode<int>* nex = NULL;
        while(curr != NULL){
            nex = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nex;
        }
        return prev;
}

bool isPalindrome(LinkedListNode<int> *head) {
    // Write your code here.
    if(head == NULL || head->next == NULL){
            return true;
        }
        // step 1 finding middle element of the linked List
        LinkedListNode<int>* middleElement = findMiddle(head);
        
        // reversing linkedList after the middle element
        LinkedListNode<int>* temp = reverse(middleElement->next);
        
        // checking palindrom from resultent linked list
        while(temp != NULL){
            if(head->data != temp->data){
                return 0;
            }
            temp = temp->next;
            head = head->next;
        }
        return 1;
}
