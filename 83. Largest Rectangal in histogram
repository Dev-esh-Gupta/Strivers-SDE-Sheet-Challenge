class Solution {
private:
    vector<int> nextSmallerIndexes(vector<int> heights, int n){
        stack<int> st;
        st.push(-1);
        vector<int> ans(n);
        for(int i=n-1; i>=0; i--){
            int curr = heights[i];
            while(st.top() != -1 && heights[st.top()] >= curr){
                st.pop();
            }
            ans[i] = st.top();
            st.push(i);
        }
        return ans;
    }

    vector<int> prevSmallerIndexes(vector<int> heights, int n){
        stack<int> st;
        st.push(-1);
        vector<int> ans(n);
        for(int i=0; i<n; i++){
            int curr = heights[i];
            while(st.top() != -1 && heights[st.top()] >= curr){
                st.pop();
            }
            ans[i] = st.top();
            st.push(i);
        }
        return ans;
    }

public:
    int largestRectangleArea(vector<int>& heights) {
        // brute force solution
        // int ans = 0;
        // for(int i=0; i<heights.size(); i++){
        //     int j = i;
        //     int curr = heights[i];
        //     while(j<heights.size() && heights[j] >= curr){
        //         j++;
        //     }
        //     int r = j;
        //     j = i;
        //     while(j>=0 && heights[j] >= curr){
        //         j--;
        //     }
        //     int l = j;
        //     int area = (r - l - 1) * curr; // breadth * height
        //     ans = max(area,ans);
        // }
        // return ans;

        // Optimised Solution using stack

        int n = heights.size();
        vector<int> next(n);
        next = nextSmallerIndexes(heights,n);

        vector<int> prev(n);
        prev = prevSmallerIndexes(heights,n);

        int area = INT_MIN;

        for(int i = 0; i<n; i++){
            int l = heights[i];
            if(next[i] == -1){
                next[i] = n;
            }
            // if(prev[i] == -1){
            //     prev[i] = -2;
            // }
            cout<<next[i]<<" "<<prev[i];
            int b = next[i] - prev[i] - 1;
            int newArea = l * b;
            area = max(area,newArea);
        }
        return area;
    }
};
